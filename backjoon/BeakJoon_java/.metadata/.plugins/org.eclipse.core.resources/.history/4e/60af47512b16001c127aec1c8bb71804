package backjoon;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

import javafx.scene.chart.ValueAxis;

public class backjoon_1516 {

	public static void main(String[] args) throws IOException {
		
		//
		
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
		
		StringTokenizer st;
		int n = Integer.parseInt(reader.readLine());

		int[] degree = new int[n+1];
		int[] indexValue = new int[n+1];
		int[] currentValue = new int[n+1];
//		ArrayList<ArrayList<Integer>> sortList = new ArrayList<>();
		ArrayList<Integer>[] sortList = new ArrayList[n+1];
		
		for(int i = 1; i <= n; i++) {
			sortList[i] = new ArrayList<Integer>();
			//			sortList.add(new ArrayList<Integer>()); 
		}
		
		
		for(int i = 1; i <= n; i++) {
			st = new StringTokenizer(reader.readLine());
			indexValue[i] = Integer.parseInt(st.nextToken());
			int m = Integer.parseInt(st.nextToken());
			while(m != -1) {
				degree[i]++;
				sortList[m].add(i);
				m = Integer.parseInt(st.nextToken());
			}
		}
		
	
		Queue<Integer> queue = new LinkedList<Integer>();
		Queue<Integer> result = new LinkedList<Integer>();
		
		
		for(int i = 1; i <= n; i++) {
			if(degree[i] == 0) {
				queue.add(i);
				currentValue[i] = indexValue[i];
			}
		}
		
//		int current;

		while(!queue.isEmpty()) {
			int num = queue.poll();
			
			for(int i : sortList.get(num)) {
				degree[i]--;
				currentValue[i] = Math.max(currentValue[i], currentValue[num] + indexValue[i]);
		
				if(degree[i] == 0) {
					result.offer(i);
				}
			}
			
		}
		
		
		
		for(int i = 1; i < currentValue.length; i++) {
			writer.write(currentValue[i] + "\n");
		}
		
		writer.flush();
		writer.close();
		
	}	
	
	
//	ArrayList<ArrayList<Integer>> sortList = new ArrayList<>();
}
