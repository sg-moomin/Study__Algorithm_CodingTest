package backjoon_20210920.*;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Collections;


class Citys  implements Comparable<Citys> {
	int frontCity;
	int backCity;
	int result;

	Citys(int frontCity, int backCity, int result) {
		this.frontCity = frontCity;
		this.backCity = backCity;
		this.result = result;
	}

	@Override
	public int compareTo(Citys o) {
		return result - o.result;
	}

}

public class backjoon_1647{

	static ArrayList<Citys> cityList;
	static int[] parent;

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer StringToken;


		StringToken = new StringTokenizer(reader.readLine());
		int N = Integer.parseInt(StringToken.nextToken());
		int M = Integer.parseInt(StringToken.nextToken());
		
		cityList = new ArrayList<>();

		
		for(int i = 0; i < M; i++){
			StringToken = new StringTokenizer(reader.readLine());
			int frontPoint = Integer.parseInt(StringToken.nextToken());
			int backPoint = Integer.parseInt(StringToken.nextToken());
			int result  = Integer.parseInt(StringToken.nextToken());

			
			
			cityList.add(new Citys(frontPoint, backPoint, result));
		}

		parent = new int[N + 1];
		for(int i = 1; i <= N; i++){
			parent[i] = i;
		}

		Collections.sort(cityList);
	

		int answer[] = new int[N-1];
		int count = 0;
		for (Citys lists : cityList){
			Citys city = lists;
			
			if(find(city.frontCity) != find(city.backCity)){
				answer[count] = city.result;
				union(city.frontCity, city.backCity);
				count++;
			}
		}

		int results = 0;
		for (int i = 0; i < (answer.length - 1); i++){
			results += answer[i];
		}
		
		
		writer.write(results + "\n");
		writer.flush();
		writer.close();
		reader.close();
		
	}

	public static int find(int answer){
	
		if (parent[answer] == answer){
			return answer;
		} 
		else{
			return parent[answer] = find(parent[answer]);
		}
		
		
	}
	
	//
	public static void union(int x, int y){
		x = find(x);
		y = find(y);

		// 동일하지 않을 경우 확인
		if(x != y){
			parent[y] = x;

		}
	} 
}
