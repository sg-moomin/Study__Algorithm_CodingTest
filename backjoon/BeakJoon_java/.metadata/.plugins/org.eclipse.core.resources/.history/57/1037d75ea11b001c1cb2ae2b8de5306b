package backjoon_20210920;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
import java.util.Collections;

class Nodes implements Comparable<Nodes> {
	int start;
	int end;
	int result;

	Nodes(int start, int end, int result) {
		this.start = start;
		this.end = end;
		this.result = result;
	}

	@Override
	public int compareTo(Nodes o) {
		return result - o.result;
	}

}

public class backjoon_1922{

	static ArrayList<Nodes> nodeList;
	static int[] parent;

	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer StringToken;

		int N = Integer.parseInt(reader.readLine());
		int M = Integer.parseInt(reader.readLine());
		
		nodeList = new ArrayList<>();

		
		for(int i = 0; i < M; i++){
			StringToken = new StringTokenizer(reader.readLine());
			int start = Integer.parseInt(StringToken.nextToken());
			int end = Integer.parseInt(StringToken.nextToken());
			int result  = Integer.parseInt(StringToken.nextToken());

			
			
			nodeList.add(new Nodes(start, end, result));
		}

		parent = new int[N + 1];
		for(int i = 1; i <= N; i++){
			parent[i] = i;
		}

		
		Collections.sort(nodeList);
	

		int answer = 0;
		for (Nodes lists : nodeList){
			Nodes node = lists;
			// System.out.print("node입니다. : " + node.start + " " + node.end + " " + node.result + " ");
			// System.out.print("findX. : " + find(node.start));
			// System.out.println("findY. : " + find(node.end));
			
			if(find(node.start) != find(node.end)){
				answer += node.result;
				union(node.start, node.end);
			}
			
		}
		
		writer.write(answer + "\n");
		writer.flush();
		writer.close();
		reader.close();
		
	}

	public static int find(int answer){
		if (parent[answer] == answer){
			return answer;
		} 
		else{
			return parent[answer] = find(parent[answer]);
		}
	}
	
	//
	public static void union(int x, int y){
		x = find(x);
		y = find(y);

		// 동일하지 않을 경우 확인
		if(x != y){
			parent[y] = x;
		}
	} 
}