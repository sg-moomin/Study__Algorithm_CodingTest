<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2021-09-21T11:23:00Z</updated>
  <entry>
    <title>This Week in Spring - September 21st, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/21/this-week-in-spring-september-21st-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-09-22:4551</id>
    <updated>2021-09-21T11:23:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! As usual, it&amp;rsquo;s been another crazy awesome, and jam-packed week in Spring, so we&amp;rsquo;ve got a ton of stuff to get to and so very little time in which to do it. &lt;em&gt;Andiamo&lt;/em&gt;! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/16/a-bootiful-podcast-dr-mark-pollack-on-physics-spring-cloud-data-flow-spring-data-spring-net-spring-xd-and-so-much-more"&gt;A Bootiful Podcast: Dr. Mark Pollack on Physics, Spring Cloud Data Flow, Spring Data, Spring.NET, Spring XD, and so much more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://m.youtube.com/watch?v=A956c_UlgDk&amp;feature=youtu.be"&gt;Changing Spring Boot packaging to WAR and deploying to Tomcat and Jetty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blogs.vmware.com/vmworld/2021/09/discover-lenovo-innovation-at-vmworld-smarter-technology-for-all.html"&gt;Discover Lenovo Innovation at VMworld: Smarter Technology for All&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html"&gt;How much faster is Java 17?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/mraible/status/1438528114099949569?s=20"&gt;In June, Okta&amp;rsquo;s Matt Raible, Brian Demers and I did a Twitch stream to figure out how to make the Okta Spring Boot starter work with Spring Native. We succeeded! However, it wasn&amp;rsquo;t easy. Watch our trials and tribulations in this video.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-framework/commit/d84ca2ba90d27a7c63d7b35a6259b5b9cf341118"&gt;Check out this &lt;em&gt;massive&lt;/em&gt; commit kicking off the official Jakarta EE 9 migration within the Spring Framework codebase!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/17/spring-data-2021-0-5-and-2020-0-13-released"&gt;Spring Data 2021.0.5 and 2020.0.13 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/17/spring-data-2021-1-0-m3-released"&gt;Spring Data 2021.1.0-M3 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/15/spring-framework-5-3-10-and-5-2-17-available-now"&gt;Spring Framework 5.3.10 and 5.2.17 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/20/spring-security-5-6-0-m3-released"&gt;Spring Security 5.6.0-M3 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/15/spring-tips-a-bootiful-look-at-springone-2021"&gt;Spring Tips: A Bootiful Look at SpringOne 2021&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/15/spring-tools-4-12-0-released"&gt;Spring Tools 4.12.0 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.i-programmer.info/news/80-java/14873-vaadin-reaches-version-21.html"&gt;Vaadin Reaches Version 21&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://wiki.openjdk.java.net/display/lilliput"&gt;What are the implications for our applications if we reduced (or halved) the Java object header size ?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Oracle recently proposed a two year cadence (instead of three) for long term releases. Microsoft&amp;rsquo;s Martijn Verburg&amp;rsquo;s onboard with the new proposal. This bodes well! ](&lt;a href="https://mail.openjdk.java.net/pi"&gt;https://mail.openjdk.java.net/pi&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Security 5.6.0-M3 released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/20/spring-security-5-6-0-m3-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Steve Riesenberg</name>
    </author>
    <id>tag:spring.io,2021-09-20:4550</id>
    <updated>2021-09-21T02:01:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I¡¯m pleased to announce the release of Spring Security 5.6.0-M3!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In addition to dependency upgrades and minor enhancements, the milestone contains a few noteworthy changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Introduced &lt;code&gt;SecurityContextChangedListener&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added SAML 2.0 Single Logout Support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added &lt;code&gt;RelyingPartyRegistrationResolver&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added support to propagate the &lt;code&gt;TestSecurityContextHolder&lt;/code&gt; to &lt;code&gt;SecurityContextHolder&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can find the complete details in the &lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.6.0-M3"&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Data 2021.0.5 and 2020.0.13 released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/17/spring-data-2021-0-5-and-2020-0-13-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2021-09-17:4548</id>
    <updated>2021-09-17T09:47:40Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I¡¯m pleased to announce the availability of the Spring Data &lt;code&gt;2021.0.5&lt;/code&gt; and &lt;code&gt;2020.0.13&lt;/code&gt; service releases.&lt;/p&gt;
&lt;p&gt;Both releases are built on top of Spring Framework &lt;code&gt;5.3.10&lt;/code&gt;. For your convenience, you can consume Spring Data &lt;code&gt;2021.0.5&lt;/code&gt; and &lt;code&gt;2020.0.13&lt;/code&gt; through the upcoming Spring Boot releases &lt;code&gt;2.5.5&lt;/code&gt; and &lt;code&gt;2.4.11&lt;/code&gt;, respectively. &lt;/p&gt;
&lt;p&gt;Both service releases ship with mostly bug fixes and dependency upgrades.&lt;/p&gt;
&lt;p&gt;To round things off, here are the links to the artifacts, changelogs, and documentation:&lt;/p&gt;&lt;h2&gt;&lt;a href="#2021-0-5" class="anchor" name="2021-0-5"&gt;&lt;/a&gt;2021.0.5&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.5.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.5.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.5.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.5.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-commons/releases/tag/2.5.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/2.2.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.2.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.2.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-jdbc/releases/tag/2.2.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.5.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.5.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.5.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.5.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-jpa/releases/tag/2.5.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/3.2.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-mongodb/releases/tag/3.2.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.5.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.5.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.5.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.5.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-keyvalue/releases/tag/2.5.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 6.1.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/6.1.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.1.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.1.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-neo4j/releases/tag/6.1.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.5.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.5.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.5.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.5.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-geode/releases/tag/2.5.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/3.2.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.2.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.2.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-cassandra/releases/tag/3.2.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.3.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-r2dbc/1.3.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.3.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.3.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-r2dbc/releases/tag/1.3.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.5.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.5.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.5.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.5.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-ldap/releases/tag/2.5.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.5.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.5.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.5.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.5.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-envers/releases/tag/2.5.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.5.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.5.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.5.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.5.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-rest/releases/tag/3.5.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.5.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.5.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.5.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.5.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-redis/releases/tag/2.5.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/4.2.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.2.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.2.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-elasticsearch/releases/tag/4.2.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/4.2.5"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.2.5/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.2.5/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-couchbase/releases/tag/4.2.5"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#2020-0-13" class="anchor" name="2020-0-13"&gt;&lt;/a&gt;2020.0.13&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.4.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.4.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-commons/releases/tag/2.4.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.1.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/2.1.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-jdbc/releases/tag/2.1.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.4.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.4.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-jpa/releases/tag/2.4.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.1.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/3.1.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-mongodb/releases/tag/3.1.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.4.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.4.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-keyvalue/releases/tag/2.4.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 6.0.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/6.0.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.0.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.0.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-neo4j/releases/tag/6.0.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.4.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.4.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-geode/releases/tag/2.4.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.1.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/3.1.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-cassandra/releases/tag/3.1.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.2.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-r2dbc/1.2.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-r2dbc/releases/tag/1.2.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.4.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.4.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-ldap/releases/tag/2.4.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.4.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.4.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-envers/releases/tag/2.4.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.4.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.4.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-rest/releases/tag/3.4.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.4.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.4.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-redis/releases/tag/2.4.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.1.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/4.1.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-elasticsearch/releases/tag/4.1.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.1.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/4.1.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-couchbase/releases/tag/4.1.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.3.13 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.3.13"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.13/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.13/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-solr/releases/tag/4.3.13"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Data 2021.1.0-M3 released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/17/spring-data-2021-1-0-m3-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2021-09-17:4549</id>
    <updated>2021-09-17T09:47:29Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I¡¯m delighted to announce the availability of the third Spring Data &lt;code&gt;2021.1.0&lt;/code&gt; milestone. This release is the last milestone before entering the RC phase on mid October. This release ships besides numerous bugfixes and dependency upgrades a series of notable enhancements:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support jMolecules&amp;rsquo; &lt;code&gt;@Identity&lt;/code&gt; as ID annotation&lt;/li&gt;
  &lt;li&gt;Publish delete events by repository methods &lt;code&gt;deleteInBatch&lt;/code&gt; and &lt;code&gt;deleteAllInBatch&lt;/code&gt; methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for MongoDB 5.0 aggregation stages and operators including &lt;code&gt;$setWindowFields&lt;/code&gt; for aggregations using time-series.&lt;/li&gt;
  &lt;li&gt;Configuration options for MongoDB&amp;rsquo;s versioned Server API.&lt;/li&gt;
  &lt;li&gt;Schema derivation for encrypted fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Options to reuse bound connections.&lt;/li&gt;
  &lt;li&gt;Enable &lt;code&gt;ReactiveRedisTemplate&lt;/code&gt; for multi-tenancy usage.&lt;/li&gt;
  &lt;li&gt;Performance optimizations using Jedis with Redis Cluster.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Elasticsearch&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Improved client configuration callbacks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Neo4j&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for cyclic mapping in projections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are working towards a release candidate release in mid-October and a GA release in early November. Watch out for the upcoming Spring Boot &lt;code&gt;2.6.0-M3&lt;/code&gt; release in the next few days that is going to pick up this Spring Data milestone.&lt;/p&gt;
&lt;p&gt;Finally, here are the links to the artifacts, changelogs, and documentation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.6 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-commons/2.6.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.6.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.6.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-commons/releases/tag/2.6.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.3 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jdbc/2.3.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.3.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.3.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-jdbc/releases/tag/2.3.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.6 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jpa/2.6.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.6.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.6.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-jpa/releases/tag/2.6.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.3 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-mongodb/3.3.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.3.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.3.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-mongodb/releases/tag/3.3.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.6 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-keyvalue/2.6.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.6.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.6.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-keyvalue/releases/tag/2.6.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 6.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-neo4j/6.2.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.2.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.2.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-neo4j/releases/tag/6.2.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.6 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-geode/2.6.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.6.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.6.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-geode/releases/tag/2.6.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.3 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-cassandra/3.3.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.3.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.3.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-cassandra/releases/tag/3.3.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.4 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-r2dbc/1.4.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.4.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.4.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-r2dbc/releases/tag/1.4.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.6 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-ldap/2.6.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.6.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.6.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-ldap/releases/tag/2.6.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.6 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-envers/2.6.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.6.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.6.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-envers/releases/tag/2.6.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.6 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-webmvc/3.6.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.6.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.6.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-rest/releases/tag/3.6.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.6 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-redis/2.6.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.6.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.6.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-redis/releases/tag/2.6.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.3 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-elasticsearch/4.3.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.3.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.3.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-elasticsearch/releases/tag/4.3.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.3 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-couchbase/4.3.0-M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.3.0-M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.3.0-M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-couchbase/releases/tag/4.3.0-M3"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Dr. Mark Pollack on Physics, Spring Cloud Data Flow, Spring Data, Spring.NET, Spring XD, and so much more</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/16/a-bootiful-podcast-dr-mark-pollack-on-physics-spring-cloud-data-flow-spring-data-spring-net-spring-xd-and-so-much-more" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-09-17:4547</id>
    <updated>2021-09-17T04:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;A Bootiful Podcast&lt;/em&gt;. In this installment, &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to the one, the only, the amazing and &lt;a href="https://twitter.com/MarkPollack"&gt;inimitable Dr. Mark Pollack (@MarkPollack)&lt;/a&gt; about physics, Spring.NET, Spring Data, Spring XD, Spring Cloud Data Flow, and so much more! &lt;/p&gt;
&lt;iframe title="The Good Dr. Mark Pollack on Spring.NET, physics, Spring Data, Spring XD, Spring Cloud Data Flow, and so much more" allowtransparency="true" height="150" width="100%" style="border: none; min-width: min(100%, 430px);" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/player-v2/?i=f8shp-10e0e12-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=auto&amp;btn-skin=7"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tools 4.12.0 released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/15/spring-tools-4-12-0-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2021-09-15:4546</id>
    <updated>2021-09-15T14:00:00Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 4.12.0 release of the Spring Tools 4 for Eclipse, Visual Studio Code, and Theia.&lt;/p&gt;&lt;h4&gt;&lt;a href="#major-changes-to-the-spring-tools-4-for-eclipse-distribution" class="anchor" name="major-changes-to-the-spring-tools-4-for-eclipse-distribution"&gt;&lt;/a&gt;major changes to the Spring Tools 4 for Eclipse distribution&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;updated to Eclipse 2021-09 release (including support for Java 16) (&lt;a href="https://www.eclipse.org/eclipseide/2021-09/"&gt;new and noteworthy&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Java 17 support available (&lt;a href="https://marketplace.eclipse.org/content/java-17-support-eclipse-2021-09-421"&gt;via separate add-on&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/sts4/wiki/Previous-Versions"&gt;early-access builds for Apple Silicon platform (ARM M1) available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;&lt;a href="#additional-changes" class="anchor" name="additional-changes"&gt;&lt;/a&gt;additional changes&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;(VS Code, Spring Boot)&lt;/em&gt; fixed: [codespaces] vscode extension crashes if specified log output location doesn&amp;rsquo;t work (&lt;a href="https://github.com/spring-projects/sts4/issues/676"&gt;#676&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse, Spring Boot)&lt;/em&gt; improvement: Little UX improvement for Tags Editor in the Properties View (&lt;a href="https://github.com/spring-projects/sts4/issues/649"&gt;#649&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse, Spring Boot)&lt;/em&gt; fixed: symbols don&amp;rsquo;t work anymore in Eclipse (&lt;a href="https://github.com/spring-projects/sts4/issues/682"&gt;#682&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse, Spring Boot)&lt;/em&gt; fixed: Problem with the STS/eclipse initializr for custom project types (&lt;a href="https://github.com/spring-projects/sts4/issues/660"&gt;#660&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To download the distribution for Eclipse and find links to the marketplace entries for Visual Studio Code and Theia, please go visit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Tools 4: &lt;a href="https://spring.io/tools/"&gt;https://spring.io/tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed changes can be found here: &lt;a href="https://github.com/spring-projects/sts4/wiki/Changelog#2021-09-15-4120-release-incl-language-servers-version-1280"&gt;https://github.com/spring-projects/sts4/wiki/Changelog#2021-09-15-4120-release-incl-language-servers-version-1280&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Tools 4.12.1 is scheduled to be released in late October 2021.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 5.3.10 and 5.2.17 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/15/spring-framework-5-3-10-and-5-2-17-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>St?phane Nicoll</name>
    </author>
    <id>tag:spring.io,2021-09-15:4545</id>
    <updated>2021-09-15T08:44:10Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that Spring Framework &lt;code&gt;5.3.10&lt;/code&gt; and &lt;code&gt;5.2.17&lt;/code&gt; are available now.&lt;/p&gt;
&lt;p&gt;Spring Framework &lt;code&gt;5.3.10&lt;/code&gt; includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.3.10"&gt;45 fixes and improvements&lt;/a&gt;. Spring Framework &lt;code&gt;5.2.17&lt;/code&gt; includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.2.17.RELEASE"&gt;13 selected fixes and improvements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Stay tuned for follow-up Spring Boot releases next week.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/5.3.10/spring-framework-reference"&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tips: A Bootiful Look at SpringOne 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/15/spring-tips-a-bootiful-look-at-springone-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-09-12:4543</id>
    <updated>2021-09-15T07:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this installment, I&amp;rsquo;m joined by teammates Tiffany Jernigan and Mario Gray as we recap some of our favorite talks from the just-finished SpringOne 2021 event! Did you miss the show? (why)? Fret not: we&amp;rsquo;ll look at some of our favorite moments from SpringOne 2021! &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/VMtUzytjo6Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - September 14th, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/14/this-week-in-spring-september-14th-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-09-14:4544</id>
    <updated>2021-09-14T10:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! It&amp;rsquo;s September 14th! I can&amp;rsquo;t believe it. I know this is a common refrain on my weekly posts, but can you &lt;em&gt;believe&lt;/em&gt; it&amp;rsquo;s already nearly Fall and Winter? What is happening?? How&amp;rsquo;d we get here so quickly? &lt;/p&gt;
&lt;p&gt;Anyway, how are you doin&amp;rsquo;? I&amp;rsquo;m doing alright! It&amp;rsquo;s been kinda a crazy week. I was in the studio all day and some of the night yesterday filming a new &lt;em&gt;Livelessons&lt;/em&gt; video that I can&amp;rsquo;t wait for y&amp;rsquo;all to see. (But be forewarned: there will be &lt;code&gt;.YAML&lt;/code&gt;!) &lt;/p&gt;
&lt;p&gt;Then, at 3am my time, I did a presentation for the Japanese Java User Group. This would be one thing in of itself, but what made this special for me was that I was supposed to appear at the JJUG six weeks ago. Yes, &lt;em&gt;that&lt;/em&gt; six weeks ago. The same six weeks ago when I was convalescing with COVID-19, six weeks ago. Needless to say (but I will!), when one is sick with the virus, they sleep. So I did. A lot. And I ended up accidentally sleeping through my appearance. And they graciously, empathetically, and kindly agreed to reschedule a week (or two? It&amp;rsquo;s all a blur to me) later. Anyway, I also slept through that one!! Ugh! I was and am so embarrassed! I still am mortified that I disappointed folks not once (perhaps understandable) but twice (_what_?!). Last night was my third attempt at being there in less than two months! They were so gracious and kind. Thank you so, so, &lt;em&gt;so&lt;/em&gt; much JJUG, for coming out and for making the show fun and for all the great questions! &lt;/p&gt;
&lt;p&gt;And today, I need to get back to the studio, so let&amp;rsquo;s get this wicked, wonderful, weekly roundup done and out there! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In last week&amp;rsquo;s &lt;a href="https://spring.io/blog/2021/09/09/a-bootiful-podcast-spring-security-engineer-josh-cummings"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I talked to Spring Security Engineer Josh Cummings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/14/efficient-parsing-of-reactive-buffer-streams"&gt;Efficient Parsing of Reactive Buffer Streams&lt;/a&gt; - a very, detailed post by Spring legend Arjen Poutsma.&lt;/li&gt;
  &lt;li&gt;Oh, and bt the way, here&amp;rsquo;s &lt;a href="https://youtube.com/watch?v=OjN6BafjOqg&amp;feature=share"&gt;my &lt;em&gt;Kubernetes Native Java&lt;/em&gt; talk from the Japanese Java User Group last night, if you want to join in on the 90 minutes of fun&lt;/a&gt;! This talk looks at a &lt;em&gt;ton&lt;/em&gt; of stuff: motivations for cloud native computing, reactive programming, R2DBC, HTTP/REST APIs with Spring WebFlux, Kubernetes probes and observability with the Spring Boot Actuator and Micrometer, Buildpacks/Paketo/KPack, GraalVM native images with Spring Native, RSocket, Kubernetes-specific configuration, API gateways with Spring Cloud Gateway, service orchestration and composition with reactive APIs, data integration gateways GraphQL with Spring GraphQL. Oh, and we deploy to Kubernetes and all the code was in a mix of Java and Kotlin! There&amp;rsquo;s a &lt;em&gt;ton&lt;/em&gt; of fun in these 90 minutes! Don&amp;rsquo;t miss it!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/jonatan_ivanov/status/1436446588138704897?s=12"&gt;We&amp;rsquo;ve released Spring Cloud Sleuth OpenTelemetry 1.0.0-M10 and 1.1.0-M1! &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I liked this community comparison of &lt;a href="https://www.dhaval-shah.com/performance-comparison-rsocket-webflux/"&gt;Spring Webflux and Spring&amp;rsquo;s RSocket integration&lt;/a&gt;. Hint: RSocket is &lt;em&gt;fast&lt;/em&gt;, and &lt;em&gt;very&lt;/em&gt; stable!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/PieterHumphrey/status/1435788337097297925"&gt;Check out what &lt;em&gt;Java Brains&lt;/em&gt; was able to do in ~15 hours - they built a full stack &lt;em&gt;Good Reads&lt;/em&gt; clone with Spring Security Spring Data and Spring Boot to scale to millions of records with Cassandra&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blogs.vmware.com/vmworld/2021/09/simplify-cloud-migration-and-modernization-with-microsoft-and-vmware.html"&gt;Simplify Cloud Migration and Modernization with Microsoft and VMware&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/09/spring-data-jdbc-how-to-use-custom-id-generation"&gt;Spring Data JDBC - How to use custom ID generation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/VMware/status/1435633964031545346"&gt;Last week, we announced the launch of Azure Spring Cloud Enterprise, managed by Microsoft! Learn more about how this service works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Also, I just wanna thank folks for coming to the talk &lt;a href="https://twitter.com/juliendubois/status/1437819092459741187?s=21"&gt;that Julien Dubois&lt;/a&gt;, Layla Porter and I did at SpringOne 2021. We received 94% positive feedback from more than 2,000 votes. Thank you for coming and thank you for making it fun!&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Efficient Parsing of Reactive Buffer Streams</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/14/efficient-parsing-of-reactive-buffer-streams" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Arjen Poutsma</name>
    </author>
    <id>tag:spring.io,2021-09-10:4542</id>
    <updated>2021-09-14T09:29:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;It has been a while since Spring Framework 5.3 was released.
One of the features in that release was a &lt;a href="https://github.com/spring-projects/spring-framework/issues/21659"&gt;major overhaul of our Reactive Multipart support&lt;/a&gt;.
In this blog post, we share some of the knowledge learned while working on this feature.
Specifically, we focus on finding a token within a stream of byte buffers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="multipart-form-data"&gt;&lt;a class="anchor" href="#multipart-form-data"&gt;&lt;/a&gt;Multipart Form Data&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Whenever you upload a file, your browser sends it&amp;#8201;&amp;#8212;&amp;#8201;and other fields in the form&amp;#8201;&amp;#8212;&amp;#8201;to the server as a &lt;code&gt;multipart/form-data&lt;/code&gt; message.
The exact format of these messages is described in &lt;a href="https://datatracker.ietf.org/doc/html/rfc7578"&gt;RFC 7578&lt;/a&gt;.
If you submit a simple form with a single text field called &lt;code&gt;foo&lt;/code&gt; and a file selector called &lt;code&gt;file&lt;/code&gt;, the &lt;code&gt;multipart/form-data&lt;/code&gt; message looks something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;POST / HTTP/1.1
Host: example.com
Content-Type: multipart/form-data;boundary="boundary" &lt;b class="conum"&gt;(1)&lt;/b&gt;

--boundary &lt;b class="conum"&gt;(2)&lt;/b&gt;
Content-Disposition: form-data; name="foo" &lt;b class="conum"&gt;(3)&lt;/b&gt;

bar
--boundary &lt;b class="conum"&gt;(4)&lt;/b&gt;
Content-Disposition: form-data; name="file"; filename="lorum.txt" &lt;b class="conum"&gt;(5)&lt;/b&gt;
Content-Type: text/plain

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer iaculis metus id vestibulum nullam.

--boundary-- &lt;b class="conum"&gt;(6)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="colist arabic"&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Content-Type&lt;/code&gt; header of the message contains the &lt;code&gt;boundary&lt;/code&gt; parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The boundary is used to start the first part. It is preceded by &lt;code&gt;--&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first part contains the value of the text field, &lt;code&gt;foo&lt;/code&gt;, as can be seen in the part headers. The value of the field is &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The boundary is used to separate between the first and second part. Again, it is preceded by &lt;code&gt;--&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second part contains the contents of the submitted file, named &lt;code&gt;lorum.txt&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The end of the message is indicated by the boundary. It is preceded and followed by &lt;code&gt;--&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="finding-the-boundaries"&gt;&lt;a class="anchor" href="#finding-the-boundaries"&gt;&lt;/a&gt;Finding the Boundaries&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The boundary in a &lt;code&gt;multipart/form-data&lt;/code&gt; message is quite important.
It is specified as a parameter of the &lt;code&gt;Content-Type&lt;/code&gt; header.
When preceded by two hyphens (&lt;code&gt;--&lt;/code&gt;), the boundary indicates the beginning of a new part.
When also followed by &lt;code&gt;--&lt;/code&gt;, the boundary indicates the end of the message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Finding the boundary in the stream of incoming byte buffers is key when parsing multipart messages.
Doing so seems simple enough:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;private int indexOf(DataBuffer source, byte[] target) {
  int max = source.readableByteCount() - target.length + 1;
  for (int i = 0; i &amp;lt; max; i++) {
    boolean found = true;
    for (int j = 0; j &amp;lt; target.length; j++) {
      if (source.getByte(i + j) != target[j]) {
        found = false;
        break;
      }
    }
    if (found) {
      return i;
    }
  }
  return -1;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;However, there is a complication:The boundary can be split across two buffers, which&amp;#8201;&amp;#8212;&amp;#8201;in a Reactive environment&amp;#8201;&amp;#8212;&amp;#8201;might not arrive at the same time.
For example, given the sample multipart message shown earlier, the first buffer might contain the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;POST / HTTP/1.1
Host: example.com
Content-Type: multipart/form-data;boundary="boundary"

--boundary
Content-Disposition: form-data; name="foo"

bar
--bou&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;While the next buffer contains the remainder:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;ndary
Content-Disposition: form-data; name="file"; filename="lorum.txt"
Content-Type: text/plain

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer iaculis metus id vestibulum nullam.

--boundary--&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If we inspect one buffer at the time, we can not find split boundaries like these.
Instead, we need to find the boundary across multiple buffers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;One way to solve this problem would be to wait until all buffers have been received, &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/buffer/DataBufferUtils.html#join-org.reactivestreams.Publisher-"&gt;join them&lt;/a&gt;, and locate the boundaries afterwards.
The following example does so, using a sample stream and the &lt;code&gt;indexOf&lt;/code&gt; method defined earlier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;Flux&amp;lt;DataBuffer&amp;gt; stream = Flux.just("foo", "bar", "--boun", "dary", "baz")
  .map(s -&amp;gt; factory.wrap(s.getBytes(UTF_8)));
byte[] boundary = "--boundary".getBytes(UTF_8);

Mono&amp;lt;Integer&amp;gt; result = DataBufferUtils.join(stream)
  .map(joined -&amp;gt; indexOf(joined, boundary));

StepVerifier.create(result)
  .expectNext(6)
  .verifyComplete();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Using Reactor&amp;#8217;s &lt;code&gt;StepVerifier&lt;/code&gt;, we see that the boundary starts at index 6.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There is one major downside to this approach: joining multiple buffers into one effectively stores the entire multipart message in memory.
Multipart messages are primarily used to upload (large) files, so this is not a viable option.
Instead, we need a smarter way to locate the boundary.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="knuth-to-the-rescue"&gt;&lt;a class="anchor" href="#knuth-to-the-rescue"&gt;&lt;/a&gt;Knuth to the Rescue!&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Luckily, such a way exists in the form of the &lt;a href="https://en.wikipedia.org/wiki/Knuth?Morris?Pratt_algorithm"&gt;Knuth?Morris?Pratt&lt;/a&gt; algorithm.
The main idea behind this algorithm is that if we already matched several bytes of the boundary but the next byte does not match, we do not need to restart the from the beginning.
To do so, the algorithm maintains state, in the form of a position in a precomputed table that contains the number of bytes that can be skipped after a mismatch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In Spring Framework, we have implemented the Knuth-Morris-Pratt algorithm in the &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/buffer/DataBufferUtils.Matcher.html"&gt;&lt;code&gt;Matcher&lt;/code&gt;&lt;/a&gt; interface, which you can obtain an instance of through &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/buffer/DataBufferUtils.html#matcher-byte:A-"&gt;&lt;code&gt;DataBufferUtils::matcher&lt;/code&gt;&lt;/a&gt;.
You can also check out the &lt;a href="https://github.com/spring-projects/spring-framework/blob/d83fb099149bd9178ee7d103c6da1ea52152c1cc/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java#L837"&gt;source code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here, we use the &lt;code&gt;Matcher&lt;/code&gt; to give us the end indices of &lt;code&gt;boundary&lt;/code&gt; in &lt;code&gt;stream&lt;/code&gt;, using the same sample input as earlier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;Flux&amp;lt;DataBuffer&amp;gt; stream = Flux.just("foo", "bar", "--boun", "dary", "baz")
  .map(s -&amp;gt; factory.wrap(s.getBytes(UTF_8)));
byte[] boundary = "--boundary".getBytes(UTF_8);

DataBufferUtils.Matcher matcher = DataBufferUtils.matcher(boundary);
Flux&amp;lt;Integer&amp;gt; result = stream.map(matcher::match);

StepVerifier.create(result)
  .expectNext(-1)
  .expectNext(-1)
  .expectNext(-1)
  .expectNext(3)
  .expectNext(-1)
  .verifyComplete();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Note that the Knuth-Morris-Pratt algorithm gives the &lt;strong&gt;end&lt;/strong&gt; index of the boundary, which explains the test results: the boundary does not end until index 3 in the second-to-last buffer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As can be expected, Spring Framework&amp;#8217;s &lt;code&gt;MultipartParser&lt;/code&gt; makes heavy use of &lt;code&gt;Matcher&lt;/code&gt;, for&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-framework/blob/d83fb099149bd9178ee7d103c6da1ea52152c1cc/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java#L292"&gt;Finding the first boundary&lt;/a&gt; by looking for the boundary prefixed by &lt;code&gt;--&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-framework/blob/d83fb099149bd9178ee7d103c6da1ea52152c1cc/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java#L480"&gt;Finding subsequent boundaries&lt;/a&gt; by looking for the boundary prefixed by &lt;code&gt;CRLF&lt;/code&gt; (end of previous part) and &lt;code&gt;--&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-framework/blob/d83fb099149bd9178ee7d103c6da1ea52152c1cc/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java#L369"&gt;Finding the &lt;code&gt;CRLF&lt;/code&gt; &lt;code&gt;CRLF&lt;/code&gt; separator&lt;/a&gt; between the part headers and part body.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If you need to find a series of bytes in a stream of byte buffers, give the &lt;code&gt;Matcher&lt;/code&gt; a try!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Spring Security Engineer Josh Cummings</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/09/a-bootiful-podcast-spring-security-engineer-josh-cummings" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-09-09:4541</id>
    <updated>2021-09-09T19:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this installment, &lt;a href="https://twitter.com/starbuman"&gt;Josh Long (@starbuman)&lt;/a&gt; talks about pumpkin spice lattes, COVID, labor day, and then gets to talk to Spring Security engineer &lt;a href="https://twitter.com/jzheaux"&gt;Josh Cummings (@jzheaux)&lt;/a&gt;&lt;/p&gt;
&lt;iframe title="Spring Security engineer Josh Cummings" allowtransparency="true" height="150" width="100%" style="border: none; min-width: min(100%, 430px);" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/player-v2/?i=kwggi-10d74ff-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;btn-skin=7"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Data JDBC - How to use custom ID generation</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/09/spring-data-jdbc-how-to-use-custom-id-generation" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Jens Schauder</name>
    </author>
    <id>tag:spring.io,2021-09-06:4533</id>
    <updated>2021-09-09T18:00:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;This is the first article of a series about how to tackle various challenges you might encounter when using Spring Data JDBC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If you are new to Spring Data JDBC, you should start by reading its &lt;a href="https://spring.io/blog/2018/09/17/introducing-spring-data-jdbc"&gt;introduction&lt;/a&gt; and &lt;a href="https://spring.io/blog/2018/09/24/spring-data-jdbc-references-and-aggregates"&gt;this article, which explains the relevance of aggregates in the context of Spring Data JDBC&lt;/a&gt;. Trust me, it is important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This article is based on part of a &lt;a href="https://springone.io/2021/sessions/post-event/spring-data-jdbc-beyond-the-obvious"&gt;talk I did at Spring One 2021&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Now we can get started with IDs - especially about what your options are when you want to control the ID of an entity and do not want to leave it to the database.
But let us first reiterate Spring Data JDBC&amp;#8217;s default strategy for this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;By default, Spring Data JDBC assumes that IDs get generated by some kind of &lt;code&gt;SERIAL&lt;/code&gt;, &lt;code&gt;IDENTITY&lt;/code&gt;, or &lt;code&gt;AUTOINCREMENT&lt;/code&gt; column.
It basically checks whether the ID of an aggregate root is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; for primitive number types.
If it is, the aggregate is assumed to be new and an insert is performed for the aggregate root.
The database generates an ID, and the ID is set in the aggregate root by Spring Data JDBC.
If the ID is not &lt;code&gt;null&lt;/code&gt;, the aggregate is assumed to be an existing one and an update is performed for the aggregate root.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Consider a simple aggregate consisting of a single simple class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;class Minion {
	@Id
	Long id;
	String name;

	Minion(String name) {
		this.name = name;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Further consider a default &lt;code&gt;CrudRepository&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;interface MinionRepository extends CrudRepository&amp;lt;Minion, Long&amp;gt; {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The repository gets autowired into your code with a line like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;	@Autowired
	MinionRepository minions;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The following works just fine:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;Minion before = new Minion("Bob");
assertThat(before.id).isNull();

Minion after = minions.save(before);

assertThat(after.id).isNotNull();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;But this next bit does not work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;Minion before = new Minion("Stuart");
before.id = 42L;

minions.save(before);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As described earlier, Spring Data JDBC tries to perform an update, because the ID is already set.
However, because the aggregate is actually new, the update statement affects zero rows and Spring Data JDBC throws an exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There are a few ways around this.
I found four different approaches for this, and I listed them with what I consider easiest first, so you can stop reading once you find a solution that works for you.
You can come back later to read about the other options and improve your Spring Data skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="version"&gt;&lt;a class="anchor" href="#version"&gt;&lt;/a&gt;Version&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Add a version attribute to your aggregate attribute.
By "version attribute" I mean an attribute annotated with &lt;code&gt;@Version&lt;/code&gt;.
The primary purpose of such an attribute is to enable optimistic locking.
However, as a side effect, the version attribute also gets used by Spring Data JDBC to determine whether the aggregate root is new or not.
As long as the version is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; for primitive types, the aggregate is considered to be new, even when the &lt;code&gt;id&lt;/code&gt; is set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With this approach, you have to change the entity and (of course) the schema but nothing else.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Also, for many applications optimistic locking is a nice thing to have in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We turn the original &lt;code&gt;Minion&lt;/code&gt; into a &lt;code&gt;VersionedMinion&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;class VersionedMinion {

	@Id Long id;
	String name;
	@Version Integer version;

	VersionedMinion(long id, String name) {

		this.id = id;
		this.name = name;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The repository and autowiring looks basically the same as the original example.
With this change, the following construct works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;VersionedMinion before = new VersionedMinion(23L, "Bob");

assertThat(before.id).isNotNull();

versionedMinions.save(before);

VersionedMinion reloaded = versionedMinions.findById(before.id).get();
assertThat(reloaded.name).isEqualTo("Bob");&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="template"&gt;&lt;a class="anchor" href="#template"&gt;&lt;/a&gt;Template&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Another way to have your will with IDs is to make the insert yourself.
You can do so by injecting a &lt;code&gt;JdbcAggregateTemplate&lt;/code&gt; and calling &lt;code&gt;JdbcAggregateTemplate.insert(T)&lt;/code&gt;.
The &lt;code&gt;JdbcAggregateTemplate&lt;/code&gt; is an abstraction layer below the repository, so you use the same code that a repository would use for an insert, but you decide when an insert is used:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;Minion before = new Minion("Stuart");
before.id = 42L;

template.insert(before);

Minion reloaded = minions.findById(42L).get();
assertThat(reloaded.name).isEqualTo("Stuart");&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Note that we do not use a repository but a template, which got injected with the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;@Autowired
JdbcAggregateTemplate template;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="eventlistener"&gt;&lt;a class="anchor" href="#eventlistener"&gt;&lt;/a&gt;EventListener&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The template approach is great for situations where you already know the ID - for example, when you import data from another system and you want to reuse the ID of that system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In cases where you do not know the ID and do not want to have anything ID-elated in your business code, using a callback might be the better option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;A callback is a bean that gets called during certain life cycle events.
The right callback for our purpose is the &lt;code&gt;BeforeSaveCallback&lt;/code&gt;.
It returns the potentially modified aggregate root, so it works for immutable entity classes as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In the callback, we determine whether the aggregate root in question needs a fresh ID. If so, we generate it by using an algorithm of our choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We use another variation of the &lt;code&gt;Minion&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;class StringIdMinion {
	@Id
	String id;
	String name;

	StringIdMinion(String name) {
		this.name = name;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Repository and injection point still look analogous to the original example.
However, we register the callback in the configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;@Bean
BeforeSaveCallback&amp;lt;StringIdMinion&amp;gt; beforeSaveCallback() {

	return (minion, mutableAggregateChange) -&amp;gt; {
		if (minion.id == null) {
			minion.id = UUID.randomUUID().toString();
		}
		return minion;
	};
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The code for saving the entity now looks just as if the &lt;code&gt;id&lt;/code&gt; had been generated by the database:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;StringIdMinion before = new StringIdMinion("Kevin");

stringions.save(before);

assertThat(before.id).isNotNull();

StringIdMinion reloaded = stringions.findById(before.id).get();
assertThat(reloaded.name).isEqualTo("Kevin");&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="persistable"&gt;&lt;a class="anchor" href="#persistable"&gt;&lt;/a&gt;Persistable&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The final option is to let the aggregate root control whether an update or insert should be made.
You can do that by implementing the &lt;code&gt;Persistable&lt;/code&gt; interface (especially the &lt;code&gt;isNew&lt;/code&gt; method).
The easiest way is to return &lt;code&gt;true&lt;/code&gt; all the time, thereby forcing an insert all the time.
Of course, this does not work when you want to use the aggregate root for updates as well.
In that case, you need to come up with a more flexible strategy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We need to tweak our &lt;code&gt;Minion&lt;/code&gt; again:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;class PersistableMinion implements Persistable&amp;lt;Long&amp;gt; {
	@Id Long id;
	String name;

	PersistableMinion(Long id, String name) {
		this.id = id;
		this.name = name;
	}

	@Override
	public Long getId() {
		return id;
	}

	@Override
	public boolean isNew() {
		// this implementation is most certainly not suitable for production use
		return true;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The code for saving a &lt;code&gt;PersistableMinion&lt;/code&gt; looks just the same:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;PersistableMinion before = new PersistableMinion(23L, "Dave");

persistableMinions.save(before);

PersistableMinion reloaded = persistableMinions.findById(before.id).get();
assertThat(reloaded.name).isEqualTo("Dave");&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="conclusion"&gt;&lt;a class="anchor" href="#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Data JDBC offers a plethora of options for how you can control the IDs of your aggregates.
While I used trivial logic for the examples, nothing keeps you from implementing whatever logic comes to your mind, since they all boil down to pretty basic Java code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/main/jdbc/howto/idgeneration"&gt;complete example code is available in the Spring Data Example repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There will be more articles like this.
Let me know if you would like me to cover specific topics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - September 7th, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/07/this-week-in-spring-september-7th-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-09-07:4534</id>
    <updated>2021-09-07T10:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! I am still reeling from the craziness of last week&amp;rsquo;s SpringOne event! That doesn&amp;rsquo;t mean that the world&amp;rsquo;s stood still in the interim though! Quite the contrary! There&amp;rsquo;s a ton of things to get to this week so without further ado let&amp;rsquo;s go! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In last week&amp;rsquo;s, &lt;a href="https://spring.io/blog/2021/09/02/a-bootiful-podcast-springone-2021-and-jackson-and-woodstox-creator-tatu-saloranta"&gt;A Bootiful Podcast, I briefly recap some of the excitement from SpringOne 2021 and then talked Jackson and Woodstox creator Tatu Saloranta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I loved Spring Framework lead Juergen Hoeller&amp;rsquo;s post &lt;a href="https://spring.io/blog/2021/09/02/a-java-17-and-jakarta-ee-9-baseline-for-spring-framework-6"&gt;&lt;em&gt;A Java 17 and Jakarta EE 9 baseline for Spring Framework 6&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blog.yugabyte.com/announcing-spring-data-yugabytedb/"&gt;Announcing Spring Data YugabyteDB - The Distributed SQL Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://tanzu.vmware.com/content/blog/announcing-vmware-tanzu-application-platform"&gt;Announcing VMware Tanzu Application Platform: A Better Developer Experience on any Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/dormaindrewitz/status/1433932107793924100?s=12"&gt;Check out the SpringOne 2021 keynotes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Speaking of SpringOne, I loved this silly moment in one of the talks from Jetbrains&amp;rsquo; &lt;a href="https://twitter.com/hhariri/status/1433687159282835457?s=12"&gt;Hadi Hariri: Spring is not Spring without @starbuxman&lt;/a&gt; - LOL!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/jonashackt/status/1435201548045463557?s=12"&gt;Jonas Hecht&amp;rsquo;s article, &lt;em&gt;Goodbye Dockerfile&lt;/em&gt;, looking at Cloud Native Buildpacks and Spring Boot, is featured in the summer edition of iXmagazin, a German language developer journal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/oracle/oracle-r2dbc/releases/tag/0.3.0"&gt;Kuassi Mensah has announced the latest official release of the R2DBC driver for Oracle database&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/maciejwalkowiak/status/1434066635133001729?s=12"&gt;Maciej Walkowiak lists some good choices for people who want options for feature toggles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/01/monitor-spring-boot-applications-end-to-end-using-dynatrace-in-azure-spring-cloud"&gt;Monitor Spring Boot applications end-to-end using Dynatrace in Azure Spring Cloud!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/piotr_minkowski/status/1432970631893733376?s=12"&gt;Piotr Mi?kowski points the community to this interesting Spring Boot integration for Testcontainers that provides auto-configurations for Spring Boot-based integration tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.sourcecodeexamples.net/2020/10/spring-boot-spring-security-jwt-react-polling-app.html?spref=tw&amp;m=1"&gt;Spring Boot, Spring Security, JWT, React, and Ant Design - Polling App | GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/09/01/spring-graphql-1-0-0-m2-available-now"&gt;Spring GraphQL 1.0.0-M2 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://tanzu.vmware.com/content/blog/springone-2021-day-2-recap-and-highlights"&gt;SpringOne 2021: Day 2 Recap and Breakout Session Highlights&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://tanzu.vmware.com/content/ebooks/the-state-of-spring-2021"&gt;The State of Spring 2021&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://tanzu.vmware.com/content/blog/vmware-tanzu-enterprise-support-spring-boot-native-applications-bellsoft-liberica-nik"&gt;VMware Tanzu Adds Enterprise Support for Spring Boot Native Applications Compiled with BellSoft Liberica NIK&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.infoworld.com/article/3631384/vmware-s-new-tanzu-platform-aims-to-unify-kubernetes-development.amp.html?__twitter_impression=true"&gt;VMware¡¯s new Tanzu platform aims to unify Kubernetes development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: SpringOne 2021 and Jackson and Woodstox creator Tatu Saloranta</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/02/a-bootiful-podcast-springone-2021-and-jackson-and-woodstox-creator-tatu-saloranta" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-09-03:4532</id>
    <updated>2021-09-02T23:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this installment, &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman )&lt;/a&gt; breathlessly recaps some of the exciting news from the just-finished SpringOne 2021 event and then talks to Jackson and Woodstox creator &lt;a href="http://twitter.com/"&gt;Tatu Saloranta (@cowtowncoder)&lt;/a&gt;&lt;/p&gt;
&lt;iframe title="SpringOne 2021 and Tatu Saloranta" allowtransparency="true" height="150" width="100%" style="border: none; min-width: min(100%, 430px);" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/player-v2/?i=k8gh5-10ce9fe-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;btn-skin=7"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Java 17 and Jakarta EE 9 baseline for Spring Framework 6</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/02/a-java-17-and-jakarta-ee-9-baseline-for-spring-framework-6" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Juergen Hoeller</name>
    </author>
    <id>tag:spring.io,2021-09-02:4531</id>
    <updated>2021-09-02T17:02:00Z</updated>
    <content type="html">&lt;p&gt;As announced at SpringOne yesterday, Spring Framework 6 and Spring Boot 3 are planned towards a high-end baseline for their general availability in Q4 2022:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Java 17+&lt;/strong&gt; (from Java 8-17 in the Spring Framework 5.3.x line)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jakarta EE 9+&lt;/strong&gt; (from Java EE 7-8 in the Spring Framework 5.3.x line)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This forward-looking baseline will provide significant benefits in our API design and integration efforts, shining through to your application code and future-proofing the framework as well as your applications for many years to come. However, it comes at a cost, of course: Spring Framework 6 and Spring Boot 3 based applications will require a minimum of JDK 17 at runtime, as well as a minimum of Tomcat 10 / Jetty 11 (for Jakarta EE 9 compatibility). Even more importantly, there might be some changes required in your application source code: e.g. the &lt;em&gt;javax&lt;/em&gt; to &lt;em&gt;jakarta&lt;/em&gt; namespace change in Jakarta EE 9 wherever you&amp;rsquo;re touching the Servlet API, JPA, Bean Validation, etc.&lt;/p&gt;
&lt;p&gt;While this may sound aggressive at first, keep in mind that we&amp;rsquo;re talking about a Q4 2022 release: By that time, not only will JDK 17 have superseded JDK 11 as the next Long-Term Support release for more than a year, it will itself have been superseded by JDK 18 and JDK 19 as then-available feature releases, with JDK 20 approaching its feature freeze already. Same for Jakarta EE 9: We expect Jakarta EE 10 to be out by then, and yet another generation of Tomcat, Jetty and co to be supported as runtime options. Keeping up the baseline above as a minimum, this allows for picking up further Java evolution in the Spring Framework 6.x generation, with Java 17 and Jakarta EE 9 only being the start.&lt;/p&gt;
&lt;p&gt;In parallel, Spring Framework 5.3.x and Spring Boot 2.x remain in active development for the time being, with Spring Boot 2.6 coming up this November and then Spring Boot 2.7 in May 2022. Once the final Spring Boot 2.x feature branch has been reached (it has yet to be determined whether this will be 2.7 or possibly a later release), that branch will turn into an extended open source maintenance phase along with Spring Framework 5.3.x, with several years of overlap in parallel to Spring Framework 6 and Spring Boot 3. Consider our previous handling of the Spring Framework 3.2.x and 4.3.x maintenance branches to understand how this will turn out in practice.&lt;/p&gt;
&lt;p&gt;So if you intend to stay on JDK 8 or 11 for a further few years, or even if you intend to stay on the Spring Framework 5.3 infrastructure on JDK 17 for several years, rest assured that our extended maintenance of Spring Framework 5.3.x and Spring Boot 2.x will keep you covered. Once you are ready to prepare your applications for the next generation of the Java ecosystem, feel free to upgrade to Spring Framework 6 and Spring Boot 3 at your own pace, along with Tomcat, Jetty and co - with new infrastructural benefits and new architectural options becoming available to you. We hope that you will appreciate those choices over the next few years.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;P.S.: In case you&amp;rsquo;re wondering about JDK 11 as an LTS generation, please note that the commercial support timeframes for JDK 11 are shorter than for JDK 8, with JDK 11 LTS phasing out in late 2023 already. JDK 17 as the next LTS generation will provide support timeframes until 2026 at least. We consider JDK 8 to have a unique role in the ecosystem; in comparison, JDK 11 is a transitional release. Also, JDK 17 provides an accumulated set of recent language, API and JVM enhancements, making it a more compelling upgrade. Last but not least, within the same Spring Framework 6.x generation, there&amp;rsquo;ll be JDK releases up until 29 LTS (in 2027) to support still, turning the eventual support range into a rather broad JDK 17-29 anyway.&lt;/em&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Monitor Spring Boot applications end-to-end using Dynatrace in Azure Spring Cloud!</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/01/monitor-spring-boot-applications-end-to-end-using-dynatrace-in-azure-spring-cloud" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-09-01:4530</id>
    <updated>2021-09-01T16:00:00Z</updated>
    <content type="html">&lt;p&gt;Today, we are excited to announce the integration of the &lt;strong&gt;Dynatrace Software Intelligence Platform in Azure Spring Cloud&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Over the past 18 months, we worked with many enterprise customers to learn about the scenarios they face. Many of these customers have thousands of Spring Boot applications running in on-premises data centers. As they migrate these applications to the cloud, they need to instrument them for application performance monitoring (APM) using solutions their developers are familiar with and have been using for years. In addition, they must ensure continuity for desktop and mobile applications that are already pre-instrumented for end-to-end monitoring using agents like Dynatrace OneAgent, which automatically discovers and maps all applications, microservices, and infrastructure as well as any dependencies in dynamic hybrid, multi-cloud environments. With the integration of Dynatrace OneAgent in Azure Spring Cloud, you can continue your journey and easily instrument your Spring Boot applications with Dynatrace.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continue your Dynatrace journey&lt;/strong&gt;. Most organizations that deploy Spring Boot applications today share a similar goal: maximize the benefits of running Spring Boot applications at virtually any scale, using automation and APM. While Azure Spring Cloud excels at abstracting away much of the toil associated with managing containerized workloads, the challenge of monitoring and maintaining the performance and health of these applications, or of troubleshooting issues when they occur, can be daunting?especially as organizations deploy these applications at massive scale. To help you succeed and continue your Dynatrace journey, we integrated and upgraded your ability to instrument, monitor and deliver observability using Dynatrace OneAgent across your Azure Spring Cloud instances. That begins with setting up instrumentation quickly and easily. Then you can analyze the performance and health of your applications, JVMs, transactions, and more.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;¡°For Liantis, true hybrid monitoring across both our on-premises and cloud-based Spring Boot microservices is key, but we also require simple and straightforward implementation - which is in line with the true Azure Spring Cloud philosophy of abstracting complexity. Doing so allows Liantis to spend more time on developing innovative applications, rather than building and operating infrastructure, which enables us to deliver true value for our customers and employees. Building on our in-house expertise with both Spring and Dynatrace technology, combined with our previous investments, the Dynatrace integration with Azure Spring Cloud was the obvious choice for Liantis.¡± &amp;ndash; Nicolas Van Kerschaver, CIO, Liantis&lt;/p&gt;
  &lt;p&gt;¡°Being able to scale is critical for today¡¯s digital business, as organizations have made the shift to cloud-native workloads and microservices. While cloud-native technologies and microservices have tremendous advantages, dynamic environments bring complexity that makes it difficult to understand the relationships and dependencies across an organization¡¯s cloud ecosystem. Dynatrace¡¯s strategic partnership with Microsoft allows us to extend the impact of our automatic and intelligent observability even further to accelerate digital transformation. Through the Dynatrace integration with Azure Spring Cloud, we are enabling full visibility into application data for Spring Boot applications, which means more time innovating and a better product for end-users.¡± ? Eric Horsman, Global Director of Strategic Alliances, Dynatrace&lt;/p&gt;
  &lt;p&gt;¡°At Microsoft, we are committed to helping our customers modernize their applications and innovate faster than ever before. By integrating a software intelligence solution like Dynatrace with Azure Spring Cloud, we can enable our customers with easy implementation of end-to-end observability, including automatic and continuous root-cause analysis, for their Spring Boot applications.¡± &amp;ndash; Julia Liuson, Corporate Vice President, Developer Division, Microsoft&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/PF0_SxuiZ2w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;strong&gt;Instrument your Spring Boot applications.&lt;/strong&gt; Run a &amp;ldquo;provisioning&amp;rdquo; automation pipeline for a complete hands-off experience to instrument and monitor any new applications that you create and deploy ? using Terraform or ARM Template. Or you can run it on-demand using the Azure CLI for greater flexibility and control.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;az spring-cloud app update --name customers-service \&#xD;
      --env DT_TENANT=&amp;lt;your-tenant&amp;gt; DT_TENANTTOKEN=&amp;lt;your-tenant-token&amp;gt; \&#xD;
      DT_CONNECTION_POINT=&amp;lt;your-connection-point&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Automatic discovery and mapping of applications and their dependencies.&lt;/strong&gt; To maintain real-time awareness in dynamic environments, Dynatrace automatically discovers and maps application components (including application servers, frameworks and microservices), databases, messaging and eventing systems, and their relationships. In the view shown below, the Dynatrace Portal shows all the Spring Boot applications running in a production workload.&lt;/p&gt;
&lt;img  width ="800" src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/1-SpringCloudDynatraceAutomaticDiscovery.png"/&gt;
&lt;p&gt;Screenshot 1 - shows all the Spring Boot applications running in a production workload&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;End-to-end observability of Spring Boot applications¡¯ complete HTTP/S transactional behavior to understand the effect on business outcomes and user experiences.&lt;/strong&gt; In the example view below, Dynatrace provides developers with all the transaction traces implemented in code without any code change to applications.&lt;/p&gt;
&lt;img  width ="800" src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/2-SpringCloudDynatraceDatabaseBacktrace.png"/&gt;
&lt;p&gt;Screenshot 2 ? shows transaction traces implemented in code without any code change to applications&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Endpoint monitoring, API monitoring, DB calls monitoring, end-user experience monitoring.&lt;/strong&gt; Dynatrace captures all the database queries initiated by your Spring Boot applications, including Azure database services. In the example view below, Dynatrace Portal shows all the active REST API operations within a production workload.&lt;/p&gt;
&lt;img  width ="800" src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/3-SpringCloudDynatraceAPICalls2.png"/&gt;
&lt;p&gt;Screenshot 3 ? shows all the active REST API operations within a production workload&lt;/p&gt;
&lt;p&gt;In the example view below, the Dynatrace Portal shows all the database queries initiated by a production workload.&lt;/p&gt;
&lt;img  width ="800" src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/4-SpringCloudDynatraceDatabaseContribution.png"/&gt;
&lt;p&gt;Screenshot 4 ? shows all the database queries initiated by a production workload&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Root-cause and impact analysis&lt;/strong&gt; of application performance problems and business outcomes for faster, more reliable incident resolution. Dynatrace provides deep-code level visibility with end-to-end traces and the integration provides AI-assisted problem detection and automatic root-cause analysis allowing you to stay on top of your deployments and distinguish between healthy and unhealthy applications.&lt;/p&gt;
&lt;img  width ="800" src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/5-SpringCloudDynatraceHotspots.png"/&gt;
&lt;p&gt;Screenshot 5 ? shows results from stack trace analysis&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Detect anomalies&lt;/strong&gt; in your Spring Boot application instances. Dynatrace passes the collected data through an AI engine for automated root cause analysis, code level hotspot analysis, top database queries and exception analysis. In the example screenshot below, Dynatrace automatically identifies code modules that are CPU intensive so that you do not have to dig through the data.&lt;/p&gt;
&lt;img src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/6-SpringCloudDynatraceCPUAnalysis.png"/&gt;
&lt;p&gt;Screenshot 6 - code modules that are CPU intensive so that you do not have to dig through the data&lt;/p&gt;
&lt;p&gt;You can find all the top database queries initiated, how expensive these queries are, and how many times these queries are called by applications. In the example screenshot below, Dynatrace shows top database queries initiated by a production workload.&lt;/p&gt;
&lt;img  width ="800" src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/7-SpringCloudDynatraceTopDatabase.png"/&gt;
&lt;p&gt;Screenshot 7 ? shows top database queries initiated by a production workload&lt;/p&gt;
&lt;p&gt;All application code level exceptions are logged along with many details into the stack traces of where the exception occurred. In the example screenshot below, Dynatrace portal shows the top exceptions thrown by a production workload.&lt;/p&gt;
&lt;img  width ="800" src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/8-SpringCloudDynatraceExceptionAnalysis.png"/&gt;
&lt;p&gt;Screenshot 8 ? shows the top exceptions thrown by a production workload&lt;/p&gt;
&lt;p&gt;The Dynatrace Software Intelligence Platform automatically baselines all the performance metrics of Spring Boot applications. When the response times of an application increase beyond the auto detected baseline, the platform creates an alert with information like how much response times have breached from baselines. In the example screenshot below, Dynatrace shows response time degradation for a few services in a production workload.&lt;/p&gt;
&lt;img   width ="800" src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/9-SpringCloudDynatraceResponseTimeProblem1-reds.jpg"/&gt;
&lt;p&gt;Screenshot 9 ? shows response time degradation for a few services in a production workload&lt;/p&gt;
&lt;p&gt;Dynatrace gives you insights on what caused these increases in response time, particularly the time taken to make a connection to a database service. In the example below, the Dynatrace portal calls out the time taken to make connections to a database.&lt;/p&gt;
&lt;img  width ="800" src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/10-SpringCloudDynatraceResponseTimeProblem2.png"/&gt;
&lt;p&gt;Screenshot 10 ? shows time taken to make connections to a database&lt;/p&gt;
&lt;p&gt;Dynatrace automatically detects all the failures. In the example below, Dynatrace signals an increase in failure rates to reach an external network.&lt;/p&gt;
&lt;img width ="800" src="https://raw.githubusercontent.com/joshlong/blog-images/master/dynatrace-azure-spring-cloud/11-SpringCloudDynatraceFailureRate_pub1.png"/&gt;
&lt;p&gt;Screenshot 11 ? signals an increase in failure rates to reach an external network&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Focus on delivering value to your end-users.&lt;/strong&gt; Once instrumented, as you scale out to multiple Spring Boot application instances, any new application instances are automatically monitored for you. Dynatrace enables application developers to observe Spring Boot applications end-to-end. You spend less time managing the agent installation and maintenance and more energy on identifying and resolving incidents faster. Azure Spring Cloud service is on-point for periodically updating the Dynatrace OneAgent.&lt;/p&gt;&lt;h2&gt;&lt;a href="#build-your-solutions-and-monitor-them-today" class="anchor" name="build-your-solutions-and-monitor-them-today"&gt;&lt;/a&gt;Build your solutions and monitor them today!&lt;/h2&gt;
&lt;p&gt;Azure Spring Cloud is jointly built, operated, and supported by Microsoft and VMware. It is a fully managed service for Spring Boot applications that abstracts away the complexity of infrastructure and Spring Cloud middleware management, so you can focus on building your business logic and let Azure take care of dynamic scaling, patches, security, compliance, and high availability. With a few steps, you can provision Azure Spring Cloud, create applications, deploy, and scale Spring Boot applications and start monitoring in minutes. We will continue to bring more developer-friendly and enterprise-ready features to Azure Spring Cloud. &lt;/p&gt;
&lt;p&gt;We would love to hear how you are building impactful solutions using Azure Spring Cloud. Start monitoring your Spring Boot applications with Dynatrace.&lt;/p&gt;&lt;h2&gt;&lt;a href="#resources" class="anchor" name="resources"&gt;&lt;/a&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Learn using an MS Learn module or self-paced workshop on GitHub&lt;/li&gt;
  &lt;li&gt;Learn more about implementing solutions on Azure Spring Cloud&lt;/li&gt;
  &lt;li&gt;See related document published by Dynatrace&lt;/li&gt;
  &lt;li&gt;Deploy a distributed version of Spring Petclinic built with Spring Cloud&lt;/li&gt;
  &lt;li&gt;Deploy Spring Boot applications by leveraging enterprise best practices ? Azure Spring Cloud Reference Architecture&lt;/li&gt;
  &lt;li&gt;Migrate your Spring Boot, Spring Cloud and Tomcat applications to Azure Spring Cloud&lt;/li&gt;
  &lt;li&gt;Wire Spring applications to interact with Azure services&lt;/li&gt;
  &lt;li&gt;For feedback and questions, please e-mail us.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring GraphQL 1.0.0-M2 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2021/09/01/spring-graphql-1-0-0-m2-available-now" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Brian Clozel</name>
    </author>
    <id>tag:spring.io,2021-08-31:4528</id>
    <updated>2021-09-01T08:20:00Z</updated>
    <content type="html">&lt;p&gt;Less than 2 months after &lt;a href="https://spring.io/blog/2021/07/06/hello-spring-graphql"&gt;the initial announcement of Spring GraphQL&lt;/a&gt; and &lt;a href="https://spring.io/blog/2021/07/06/introducing-spring-graphql"&gt;its follow up intro blog&lt;/a&gt;,&lt;br/&gt;I&amp;rsquo;m happy to announce that the &lt;code&gt;1.0.0-M2&lt;/code&gt; version has been released and is available from the Spring Milestone repository.&lt;/p&gt;
&lt;p&gt;The Spring GraphQL team would like to thank the early adopters and contributors - with your help, we&amp;rsquo;re making good progress towards a GA version!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve &lt;a href="https://github.com/spring-projects/spring-graphql/milestone/2?closed=1"&gt;fixed a few issues and renamed a couple of concepts&lt;/a&gt;, but the most notable change is the introduction of a &lt;a href="https://docs.spring.io/spring-graphql/docs/1.0.0-M2/reference/html/#controllers"&gt;new annotation model for GraphQL Controllers&lt;/a&gt;.&lt;br/&gt;You can now annotate &lt;code&gt;@Controller&lt;/code&gt; components to handle queries, mutations and subscriptions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Controller&#xD;
public class GreetingController {&#xD;
&#xD;
        @QueryMapping &#xD;
        public String hello() { &#xD;
            return &amp;quot;Hello, world!&amp;quot;;&#xD;
        }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a new feature and we can&amp;rsquo;t wait to hear your feedback - &lt;a href="https://docs.spring.io/spring-graphql/docs/1.0.0-M2/reference/html/#controllers"&gt;please give it a try&lt;/a&gt; and let us know what you think!&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-graphql-at-springone" class="anchor" name="spring-graphql-at-springone"&gt;&lt;/a&gt;Spring GraphQL at SpringOne!&lt;/h2&gt;
&lt;p&gt;Don&amp;rsquo;t miss the &lt;a href="https://springone.io/2021/sessions/spring-graphql"&gt;Spring GraphQL presentation at SpringOne today&lt;/a&gt;!&lt;br/&gt;This will give a nice intro to this new Spring project and you&amp;rsquo;ll get a chance to chat with the team, live and on the dedicated SpringOne Slack.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, you can &lt;a href="https://docs.spring.io/spring-graphql/docs/1.0.0-M2/reference/html/#boot-graphql"&gt;get started with Spring GraphQL&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-graphql/issues"&gt;raise issues on our GitHub project&lt;/a&gt;.&lt;br/&gt;If you have general questions, please ask on &lt;a href="https://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="https://stackoverflow.com/tags/spring-graphql"&gt;&lt;code&gt;spring-graphql&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-graphql/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-graphql"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-graphql/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-graphql/docs/1.0.0-M2/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-graphql"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - August 31st, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/08/31/this-week-in-spring-august-31st-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-09-01:4529</id>
    <updated>2021-09-01T02:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Can you believe it? &lt;em&gt;&lt;a href="https://springone.io"&gt;SpringOne 2021&lt;/a&gt;&lt;/em&gt; kicks off in less than 24 hours! Have you registered? It&amp;rsquo;s free and it&amp;rsquo;s virtual, but the talks are live and there&amp;rsquo;ll be ample opportunity to talk to the Spring and Tanzu teams behinds the scenes. And, of course, I&amp;rsquo;ll be there. Also, don&amp;rsquo;t miss tomorrow mornings opening keynote, which I&amp;rsquo;ll be emceeing. And please don&amp;rsquo;t &lt;a href="https://springone.io/2021/sessions/rapid-development-with-azure-spring-cloud"&gt;miss my session on Azure Spring Cloud with Julien Dubois and Layla Porter&lt;/a&gt;. There are a &lt;em&gt;ton&lt;/em&gt; of great talks over the next two days. Do &lt;em&gt;not&lt;/em&gt; miss these! Alrigty my friends, we&amp;rsquo;ve got a ton of stuff to review so without further ado, let&amp;rsquo;s dive right in! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hi, Spring fans! In the last week&amp;rsquo;s installment of &lt;a href="https://spring.io/blog/2021/08/26/bootiful-podcast-richard-north-and-sergei-egorov-on-testcontainers-their-new-company-atomicjar-and-more"&gt;&lt;em&gt;Bootiful Podcast&lt;/em&gt;, I talked to Richard North and Sergei Egorov on Testcontainers, their new company AtomicJar, and more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/JavaAtMicrosoft/status/1430567050120859648"&gt;Get hands-on with Azure Spring Cloud in 90 minutes. Register today - space is limited! Brought to you by Microsoft and VMware&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/JavaAtMicrosoft/status/1430674051979120646"&gt;Are you ready to rapidly deploy and scale Spring Boot apps to Azure Spring Cloud? Register today!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This video seems like it&amp;rsquo;ll be worth a watch &lt;a href="https://www.youtube.com/watch?v=tljZWMreKrY"&gt;if you&amp;rsquo;re trying to learn Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Here&amp;rsquo;s an interesting video that looks &lt;a href="https://www.youtube.com/watch?v=_PEPaWFs064"&gt;at streaming with the reactive Spring Webflux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This looks interesting: a video from Manning Publications on &lt;a href="https://www.youtube.com/watch?v=9r7UxenMxuc"&gt;building and securing web applications with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Have you seen the &lt;a href="https://spring.io/community"&gt;Spring.io Community page?&lt;/a&gt; It&amp;rsquo;s a great place to find out about some of the external resources and portals in the wider community.&lt;/li&gt;
  &lt;li&gt;Instana has updated their documentation on how to &lt;a href="https://www.instana.com/docs/ecosystem/spring-boot/"&gt;monitor Spring Boot applications with their suite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Baeldung article on embedding the &lt;a href="https://www.baeldung.com/keycloak-embedded-in-spring-boot-app"&gt;Keycloak authorization and authentication server in a Spring &lt;/a&gt; Boot application has been updated.&lt;/li&gt;
  &lt;li&gt;The Baeldung article on the fundamentals &lt;a href="https://www.baeldung.com/spring-dependency-injection"&gt;of dependency injection in Spring has also been updated&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Bootiful Podcast - Richard North and Sergei Egorov on Testcontainers, their new company AtomicJar, and more</title>
    <link rel="alternate" href="https://spring.io/blog/2021/08/26/bootiful-podcast-richard-north-and-sergei-egorov-on-testcontainers-their-new-company-atomicjar-and-more" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-08-26:4527</id>
    <updated>2021-08-26T11:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! In this installment, Josh Long talks to &lt;a href="https://twitter.com/whichrich"&gt;Richard North (@whichrich)&lt;/a&gt; and &lt;a href="https://twitter.com/bsideup"&gt;Sergei Egorov (@bsideup)&lt;/a&gt; about Testcontainers, their new company AtomicJar, and software licensing, among other things.&lt;/p&gt;
&lt;iframe title="Richard North and Sergei Egorov on Testcontainers, their new company AtomicJar, and more" allowtransparency="true" height="150" width="100%" style="border: none; min-width: min(100%, 430px);" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/player-v2/?i=ist4k-10c5198-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;btn-skin=7"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - August 24th, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/08/24/this-week-in-spring-august-24th-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-08-24:4526</id>
    <updated>2021-08-24T07:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans, and welcome to another riveting roundup of all the news that&amp;rsquo;s fit to reprint in the Java and Spring ecosystems, with apologies, as always, to &lt;em&gt;The Times&lt;/em&gt;. We&amp;rsquo;re a week away from &lt;a href="https://springone.io"&gt;SpringOne 2021&lt;/a&gt;, our annual, free, and utterly online tentpole conference featuring hundreds of hours of amazing technical content from speakers all around the world and tens of thousands of attendees with whom to partake in the festivities. Do &lt;em&gt;not&lt;/em&gt; miss this! I&amp;rsquo;ll be there! &lt;/p&gt;
&lt;p&gt;I get so excited in the leadup to SpringOne each year, and this year doubly so! First, there&amp;rsquo;s the usual monumental scope of the whole thing, which always gets me. &lt;a href="https://twitter.com/starbuxman/status/1429554959675125763"&gt;I also just got my first (of hopefully many) negative COVID-19 tests&lt;/a&gt; a few days ago, after three weeks of convalescence. Huzzah! I&amp;rsquo;m still taking it easy, trying to make sure I stay on the good side of the hospital doors, and that I don&amp;rsquo;t relapse or incur any of the possible repercussions of COVID post-recovery. All that to say that SpringOne, this year, a year in which we - a worldwide community - have been through hell and back and &lt;em&gt;still&lt;/em&gt; shipped paradigm-shifting, game-changing software, and a year in which I fought COVID-19, is going to be extra special for me. I got so excited I started &lt;a href="https://twitter.com/starbuxman/status/1430309519062573057?s=21"&gt;tweeting poetry &lt;/a&gt; :-) &lt;/p&gt;
&lt;p&gt;Anyway, enough about this and that, let&amp;rsquo;s get to the roundup! There&amp;rsquo;s a ton of good stuff my friends! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/08/19/spring-authorization-server-goes-to-production"&gt;Spring Authorization Server goes to production!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/08/19/a-bootiful-podcast-microsoft-azure-engineering-manager-rome-li-on-his-work-supporting-microsoft-azure-in-intellij-visual-studio-maven-eclipse-and-visual-studio-code"&gt;A Bootiful Podcast: Microsoft Azure engineering manager Rome Li on his work supporting Microsoft Azure in IntelliJ, Visual Studio, Maven, Eclipse, and Visual Studio Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://tanzu.vmware.com/developer/tv/bcak/39/"&gt;I love this episode of Nate Schutta&amp;rsquo;s podcast, &amp;ldquo;Between Chair and Keyboard&amp;rdquo;&lt;/a&gt; with Ryan Baxter&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-4-10-is-now-available"&gt;Spring Boot 2.4.10 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-5-4-available-now"&gt;Spring Boot 2.5.4 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-6-0-m2-is-now-available"&gt;Spring Boot 2.6.0-M2 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://m.youtube.com/watch?v=uFPbUqrbanc&amp;feature=youtu.be"&gt;Spring Cloud Config for Shared Microservice Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/08/18/spring-tools-4-11-1-released"&gt;Spring Tools 4.11.1 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/08/22/structuring-your-code-for-spring-framework-and-spring-boot"&gt;Structuring Your Code for Spring Framework and Spring Boot&lt;/a&gt; - I wrote a blog on how to think about the wiring of your objects in a typical Spring Boot application. I speak more about how the wiring works from an IoC perspective, not in terms of a particular paradigm or Spring module. The blog is meant to be a response to a question I received on Twitter that precipitated some writing. I hope you enjoy it!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/JavaAtMicrosoft/status/1430184278122397700"&gt;Microsoft and VMware would love to see you at SpringOne in September! Join us for big Spring on Azure announcements and attend keynotes, sessions, and a hands-on workshop. &lt;/a&gt;. Did I mention that I&amp;rsquo;ll be doing a breakout introducing all the new goodness in Azure Spring Cloud with my friends Julien Dubois and Layla Porter? Don&amp;rsquo;t miss this!&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
</feed>
